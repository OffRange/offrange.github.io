/*! For license information please see 08548717-7268e433a92daea1fbc7.js.LICENSE.txt */
"use strict";(self.webpackChunkdev_portfolio=self.webpackChunkdev_portfolio||[]).push([[607],{7546:function(e,t,a){a.d(t,{Q6:function(){return w}});a(6541);var s=a(5840),n=a(597),r=a(4499),i=a(6195),o=a(5368),h=a(8697),u=a(4187),l=a(5320),d=a(3839),p=a(2792),c=a(457),g=a(282),m=a(9023),f=a(8560),I=a(7403),x=a(8173),T=a(2509),E=a(6969),L=a(8380);const y=s.kpo.YO,_={};const P=(0,s._K2)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class w extends s.uI_{nextDataId(){return w.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,s._K2)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof d.n)t=e;else{const a=(0,n.bU)((0,s._K2)().getNumber("WEBGL_VERSION"),e);t=new d.n(a)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=(0,n.bU)((0,s._K2)().getNumber("WEBGL_VERSION"));t=new d.n(e),this.binaryCache=((a=(0,s._K2)().getNumber("WEBGL_VERSION"))in _||(_[a]={}),_[a]),this.gpgpuCreatedLocally=!0}var a;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new I.p(this.gpgpu),this.numMBBeforeWarning=null==(0,s._K2)().global.screen?1024:(0,s._K2)().global.screen.height*(0,s._K2)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new s.GJx(this,(0,s.Hi9)())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,a,s,n,r){const i=this.makeTensorInfo(t,a),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[s,n]},o.texShape=[s,n];const h=L.FP(t),l=new u.C(h,!1,r),d=this.runWebGLProgram(l,[i],a,[[s,n]]);return d.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),d.dataId}write(e,t,a){if(((0,s._K2)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,s._K2)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===a&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const n={id:this.nextDataId()};return this.texData.set(n,{shape:t,dtype:a,values:e,usage:f.tT.UPLOAD,refCount:1}),n}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,a,n,r){if((0,s._K2)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:a,dtype:n,values:t,usage:f.tT.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:a,dtype:n,complexTensorInfos:r,slice:i,shape:o,isPacked:h}=t;if(null!=i){let t;t=h?new T.rf(o,x.UC):new x.hE(o,x.UC);const a=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:n}],n),s=this.readSync(a.dataId);return this.disposeIntermediateTensorInfo(a),s}if(null!=a)return this.convertAndCacheOnCPU(e);if("string"===n)return a;const u=null!=this.activeTimers;let l,d;if(u&&(l=s.ZSL.now()),"complex64"===n){const e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);d=s.C0T.mergeRealAndImagArrays(e,t)}else d=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=s.ZSL.now()-l),this.convertAndCacheOnCPU(e,d)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:a,shape:n,slice:r,dtype:i,complexTensorInfos:o,isPacked:h}=t;if(null!=r){let t;t=h?new T.rf(n,x.UC):new x.hE(n,x.UC);const a=this.runWebGLProgram(t,[{dataId:e,shape:n,dtype:i}],i),s=this.read(a.dataId);return this.disposeIntermediateTensorInfo(a),s}if(null!=a)return this.convertAndCacheOnCPU(e);if((0,s._K2)().getBool("DEBUG")&&!(0,s._K2)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,s._K2)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,d=null;if("complex64"!==i&&(0,s._K2)().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);d=this.gpgpu.createBufferFromTexture(t.texture.texture,...f.GM(n))}if(this.pendingRead.set(e,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]),t=e[0],a=e[1];l=s.C0T.mergeRealAndImagArrays(t,a)}else if(null==d)l=this.getValuesFromTexture(e);else{const e=s.ZSL.sizeFromShape(n);l=this.gpgpu.downloadFloat32MatrixFromBuffer(d,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=d){const e=this.gpgpu.gl;L.ul(e,(()=>e.deleteBuffer(d)))}const p=this.convertAndCacheOnCPU(e,l),c=this.pendingRead.get(e);return this.pendingRead.delete(e),c.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,s.Hi9)().removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){const a=this.texData.get(e),{values:n,shape:r,slice:i,dtype:o,isPacked:h,texture:u}=a;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let a;a=h?new T.rf(r,x.UC):new x.hE(r,x.UC);const s=this.runWebGLProgram(a,[{dataId:e,shape:r,dtype:o}],o),n=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),n}if(null==u)throw null!=n?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),d=(0,s.Hi9)().makeTensorFromTensorInfo(l),p=this.texData.get(l.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const a=t.map((e=>s.ZSL.decodeString(e)));return(0,s.ra8)(e.shape,e.dtype,a)}catch(a){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,s.ra8)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const a=e[t];if(!L.dm(a)){if((0,s._K2)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${a} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${a} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:a,isPacked:n}=this.texData.get(e),r=s.ZSL.sizeFromShape(t);if((0,s._K2)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const a=this.decode(e),s=this.texData.get(a.dataId),n=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...f.GM(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(a),n}const i=(0,s._K2)().getBool("WEBGL_PACK")&&!0===n,u=i?L.FP(t):t,l=i?new h.N(u):new o.$(u),d=this.runWebGLProgram(l,[{shape:u,dtype:a,dataId:e}],"float32"),p=this.texData.get(d.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(p.texture.texture,p.texShape[0],p.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(d),c}timerAvailable(){return(0,s._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,a=[];let n=!1;null==this.programTimersStack?(this.programTimersStack=a,n=!0):this.activeTimers.push(a),this.activeTimers=a,e();const r=s.ZSL.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=s.ZSL.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,n&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,s._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);o.kernelMs=s.ZSL.sum(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:i[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,s._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:s.ZSL.now(),endMs:null}}endTimer(e){return(0,s._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=s.ZSL.now(),e)}async getQueryTime(e){if((0,s._K2)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:a}=this.texData.get(e);return null!=a&&(this.disposeData(a.real.dataId,t),this.disposeData(a.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:a,texShape:s,usage:n,isPacked:r,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,h=this.dataRefCount.get(o);h>1?this.dataRefCount.set(o,h-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,a),this.textureManager.releaseTexture(t,s,n,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=P){return(0,s._K2)().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&s.ZSL.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){s.C0T.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return y(e.shape,t)}packedUnaryOp(e,t,a){const n=new T.rf(e.shape,t),r=this.compileAndRun(n,[e],a);return(0,s.Hi9)().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=(0,c.f8)(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,s._K2)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,x.pd,e.dtype);const t=new x.hE(e.shape,x.pd),a=this.compileAndRun(t,[e]);return(0,s.Hi9)().makeTensorFromTensorInfo(a)}makeTensorInfo(e,t,a){let n;if("string"===t&&null!=a&&a.length>0&&s.ZSL.isString(a[0])){const r=a.map((e=>s.ZSL.encodeString(e)));n=this.write(r,e,t)}else n=this.write(a,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t,a){return(0,s.Hi9)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,a),this)}unpackTensor(e){const t=new E.z(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new g.m(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const a=[L.N0(e.shape),...L.Ph(e.shape)],s={dtype:e.dtype,shape:a,dataId:e.dataId},n=[L.N0(t),...L.Ph(t)],r=new m.R(n,a),i=[a],o=this.runWebGLProgram(r,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const a=this.texData.get(e),{isPacked:n,shape:o,dtype:h}=a;if(null!=t){const e=s.ZSL.sizeFromShape(o),a=t[0]*t[1]*4;s.ZSL.assert(e<=a,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const u=L.FP(o);let l;l=n?new i.S(u):new r.K(u);const d=[null!=t?t:f.GM(u)];return{dtype:h,shape:o,dataId:this.runWebGLProgram(l,[{shape:u,dtype:h,dataId:e}],h,d,!0,t).dataId}}runWebGLProgram(e,t,a,n,r=!1,i){const o=this.makeTensorInfo(e.outputShape,a),h=this.texData.get(o.dataId);if(e.packedOutput&&(h.isPacked=!0),e.outPackingScheme===f.BB.DENSE){const t=null!=i?i:f.GM(e.outputShape);h.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(h.usage=e.outTexUsage),0===s.ZSL.sizeFromShape(o.shape))return h.values=s.ZSL.getTypedArrayFromDType(o.dtype,0),o;const u=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let a=this.texData.get(t.dataId);if(null==a.texture){if(!e.packedInputs&&s.ZSL.sizeFromShape(t.shape)<=(0,s._K2)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:a.values};e.packedInputs&&(a.isPacked=!0,a.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!a.isPacked!=!!e.packedInputs)t=a.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),a=this.texData.get(t.dataId);else if(a.isPacked&&!L.P0(a.shape,t.shape)){const e=t,s=t.shape;t.shape=a.shape,t=this.packedReshape(t,s),u.push(t),a=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:a,isUniform:!1}}));this.uploadToGPU(o.dataId);const d={shape:o.shape,texData:h,isUniform:!1},c=p.Tb(e,l,d),g=this.getAndSaveBinary(c,(()=>p.Kz(this.gpgpu,e,l,d))),m=null!=this.activeTimers;let I;m&&(I=this.startTimer()),(0,s._K2)().get("ENGINE_COMPILE_ONLY")||p.mB(this.gpgpu,g,l,d,n),u.forEach((e=>this.disposeIntermediateTensorInfo(e))),m&&(I=this.endTimer(I),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(I)}));const x=(0,s._K2)().getNumber("WEBGL_FLUSH_THRESHOLD");if(x>0){const e=s.ZSL.now();e-this.lastGlFlushTime>x&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,s._K2)().getBool("WEBGL_LAZILY_UNPACK")&&h.isPacked&&!1===r){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,a,s,n=!1){a=a||t[0].dtype;return this.runWebGLProgram(e,t,a,s,n)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!(0,s._K2)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,s.DZQ)((()=>{if(!(0,s._K2)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,s._K2)().getBool("DEBUG");(0,s._K2)().set("DEBUG",!1);const t=this.abs((0,s.d_2)(1e-8)).dataSync()[0];if((0,s._K2)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:a,dtype:n,values:r,texture:i,usage:o,isPacked:h}=t;if(null!=i)return;const d=null!=this.activeTimers;let p;d&&(p=s.ZSL.now());let c=t.texShape;if(null==c&&(c=L.fA(a,h),t.texShape=c),null!=r){const e=L.FP(a);let i,o=c[1],g=c[0];const m=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!h&&m||([o,g]=f.NO(c[0],c[1])),i=h?new l.A(e,m):new u.C(e,m);const I=m?[g,o]:c,x=this.makeTensorInfo(I,n),T=this.texData.get(x.dataId);T.usage=m?f.tT.PIXELS:f.tT.UPLOAD,T.texShape=I,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(x.dataId),o,g,r);const E=[[g,o]],y=!0,_=this.runWebGLProgram(i,[x],n,E,y),P=this.texData.get(_.dataId);t.texShape=P.texShape,t.isPacked=P.isPacked,t.usage=P.usage,(0,s._K2)().get("ENGINE_COMPILE_ONLY")?this.disposeData(_.dataId):(t.texture=P.texture,t.values=null,this.texData.delete(_.dataId)),this.disposeIntermediateTensorInfo(x),d&&(this.uploadWaitMs+=s.ZSL.now()-p)}else{const e=this.acquireTexture(c,o,n,h);t.texture=e}}convertAndCacheOnCPU(e,t){const a=this.texData.get(e),{dtype:s}=a;return null!=t&&(a.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const a="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<a.length;++t)a[t]=Math.round(e[t]);return a}throw new Error(`Unknown dtype ${t}`)}(t,s)),a.values}acquireTexture(e,t,a,s){if(this.numBytesInGPU+=this.computeBytes(e,a),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*s.ZSL.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const a=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(a){throw a}}));e.push(a)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await(0,s.dA1)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw L.cr(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:a,infLoc:s,nanLoc:n,outShapeLocation:r,outShapeStridesLocation:i,outTexShapeLocation:o}=(0,p.Tw)(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=a,e.infLoc=s,e.nanLoc=n,e.outShapeLocation=r,e.outShapeStridesLocation=i,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,a){e.channels=e.channels||"RGBA";const{texture:n,height:r,width:i,channels:o}=e,h=(0,s.Hi9)().backend;if(!h.gpgpu.gl.isTexture(n))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const u=h.writeTexture(n,t,a,r,i,o);return(0,s.Hi9)().makeTensorFromDataId(u,t,a,h)}}w.nextDataId=0}}]);
//# sourceMappingURL=08548717-7268e433a92daea1fbc7.js.map